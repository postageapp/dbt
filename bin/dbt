#!/usr/bin/env node

// == Imports ===============================================================

var child_process = require('child_process');
var path = require('path');
var fs = require('fs');

var dbt = require('../lib/dbt');
var sqlRewriter = require('../lib/dbt/pg/sql_rewriter');

// == Constants =============================================================

var snapshotDirDefault = path.resolve(__dirname, '../snapshots');

var configNames = [
  'config/database.json',
  'config/database.yml',
  'config/database.yaml',
  'config/config.json'
];

var envNames = [
  'NODE_ENV',
  'RACK_ENV',
  'RAILS_ENV'
];

// == Support Methods =======================================================

function changeDatabaseName(options) {
  var transform = stream.Transform();

  return ;
}

function spawn(exec, args, options) {
  if (options.log) {
    console.log('# ' + [ exec ].concat(args).join(' '));
  }

  return child_process.spawn(exec, args);
}

function relativePath(fullPath) {
  if (!fullPath) {
    return fullPath;
  }

  var cwd = process.cwd();

  if (fullPath.substr(0, cwd.length) === cwd) {
    return fullPath.substr(cwd.length + 1, fullPath.length);
  }

  return fullPath;
}

function defaultEnv() {
  var env;

  envNames.forEach(function(name) {
    if (process.env[name] && !env) {
      env = process.env[name];
    }
  })

  return env || 'development';
}

function findConfig() {
  var dir;
  var pdir;
  var foundConfigPath;

  for (var dir = process.cwd(); dir != pdir; dir = path.resolve(dir, '..')) {
    configNames.forEach(function(configName) {
      var configPath = path.resolve(dir, configName);

      if (fs.existsSync(configPath)) {
        foundConfigPath = configPath;
      }
    })

    if (foundConfigPath) {
      return foundConfigPath;
    }

    pdir = dir;
  }
}

function readConfigYAML(configPath, env) {
  var YAML = require('yaml-js');

  var data = YAML.load(fs.readFileSync(configPath));

  return data && data[env];
}

function readConfigJSON(configPath, env) {
  var data = JSON.parse(fs.readFileSync(configPath));

  return data && data[env];
}

function readConfig(configPath, env) {
  switch (path.extname(configPath)) {
    case '.yaml':
    case '.yml':
      return readConfigYAML(configPath, env);
      break;
    case '.json':
      return readConfigJSON(configPath, env);
      break;
  }
}

function mostRecentSnapshotPath(dir) {
  var mostRecent;
  var highestTimestamp = 0;

  fs.readdirSync(dir).forEach(function(file) {
    var timestamp = parseInt(file.split('.')[1]);

    if (timestamp > highestTimestamp) {
      mostRecent = path.resolve(dir, file);
      highestTimestamp = timestamp;
    }
  })

  return mostRecent;
}

function currentSnapshotPath(dir, dbName) {
  return path.resolve(dir, dbName + '.' + Math.floor(new Date().getTime() / 1000) + '.dump');
}

function currentStructurePath(dir, dbName) {
  return path.resolve(dir, dbName + '.' + Math.floor(new Date().getTime() / 1000) + '.sql');
}

function authArguments(options) {
  var args = [ ];

  if (options.username) {
    args.push('--username');
    args.push(options.username);
  }

  if (options.host) {
    args.push('--host');
    args.push(options.host);
  }

  if (options.password) {
    process.env.PGPASSWORD = options.password;
  }

  return args;
}

function commonArguments() {
  return [
    '--format=custom',
    '--no-owner',
    '--no-privileges',
    '--no-security-labels',
    '--use-set-session-authorization'
  ];
}

function restoreFromDump(dumpPath, options) {
  var pg_restore = spawn(
    'pg_restore',
    commonArguments().concat([
      dumpPath,
    ]),
    options
  );

  var psql = spawn(
    'psql',
    authArguments(options),
    options
  );

  pg_restore.stderr.on('data', function(data) {
    console.error(data.toString());
  });

  pg_restore.stdout.pipe(
    sqlRewriter(options)
  ).pipe(
    psql.stdin
  );

  psql.stderr.on('data', function(data) {
    console.error(data.toString());
  });

  return pg_restore.stderr;
}

function restoreFromSql(dumpPath, options) {
  var psql = spawn(
    'psql',
    authArguments(options),
    options
  );

  fs.FileReadStream(dumpPath).pipe(

  )
}

function execPsql(options) {
  var kexec = require('kexec');

  kexec(
    'psql',
    authArguments(options).concat([
      '--dbname', options.database,
    ])
  );
}

function snapshotCreate(snapshotPath, options) {
  var pg_dump = spawn(
    'pg_dump',
    authArguments(options).concat(commonArguments()).concat([
      '--compress=9',
      '--file', snapshotFile,
      options.database
    ]),
    options
  );

  pg_dump.stderr.on('data', function(data) {
    console.error(data.toString())
  });

  return pg_dump.stderr;
}

function structureCreate(structureFile, options) {
  var pg_dump = spawn(
    'pg_dump',
    authArguments(options).concat([
      '--ignore-version',
      '--schema-only',
      '--no-privileges',
      '--no-acl',
      '--no-owner',
      '--file', structureFile,
      options.database
    ]),
    options
  );
}

// == Main ==================================================================

var configPathDefault = findConfig();
var snapshotsDirDefault = configPathDefault && path.resolve(configPathDefault, '../..', 'db/snapshots');

var options = require('commander').
  option('-s --snapshot', 'Snapshot the current database structure and data').
  option('-t --structure', 'Snapshot the current database structure').
  option('-r --restore', 'Restore the current database').
  option('-d --database [database]', 'Database to snapshot from or restore to').
  option('-e --env [env]', 'Use a specific environment', defaultEnv()).
  option('-c --config [config]', 'Configuration file path', configPathDefault).
  option('-p --dir [dir]', 'Snapshot directory path to save to or read from', snapshotsDirDefault).
  option('-f --file [file]', 'Filename to read from or save to').
  option('-i --info', 'Show the current configuration and exit').
  option('-l --log', 'Log which commands are executed').
  version(require('../package.json').version).
  parse(process.argv);

if (options.args) {
  options.file = options.args[0];
}

// FIX: Read database.json or database.yml
var snapshotDir = options.dir || snapshotDirDefault;

if (!fs.existsSync(options.config)) {
  console.error("Could not find a configuration file to read.");
  process.exit(-12);
}

var config = readConfig(options.config, options.env);

if (!config) {
  console.error("Could not find configuration for environment '" + options.env + "' in config file '" + options.config + "'");
  process.exit(-12);
}

options.username = options.username || config.username;
options.password = options.password || config.password;
options.host = options.host || config.host;
options.database = options.database || config.database;

if (!options.database) {
  console.error("Could not determine which database to use");
  process.exit(-11);
}

if (options.info) {
  console.log('Detected Configuration')
  console.log('------------------------------------------------')
  console.log('Config Path: ' + relativePath(options.config));
  console.log('        Env: ' + options.env);

  if (options.host) {
    console.log('       Host: ' + options.host);
  }

  if (options.username) {
    console.log('   Username: ' + options.username);
  }

  if (options.password) {
    console.log('   Password: ' + options.password.replace(/./, '*'));
  }

  console.log('   Database: ' + options.database);
  console.log('  Snapshots: ' + relativePath(options.dir));
  process.exit(0);
}

if (options.snapshot) {
  var snapshotFile = options.file || currentSnapshotPath(snapshotDir, options.database);

  snapshotCreate(snapshotFile, options);
}
else if (options.structure) {
  var structureFile = options.file || currentStructurePath(snapshotDir, options.database);

  structureCreate(structureFile, options);
}
else if (options.restore) {
  snapshotFile = options.file || mostRecentSnapshotPath(snapshotDir)

  switch (path.extname(snapshotFile))
  {
    case '.dump':
      restoreFromDump(snapshotFile, options);
      break;
    case '.sql':
      restoreFromSql(snapshotFile, options);
      break;
  }
}
else {
  execPsql(options);
}
